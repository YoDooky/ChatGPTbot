from aiogram import Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot
from aiogram.dispatcher import FSMContext
from telegram import validate

from telegram import markups
from chatGPT_summary import get_ai_summary
from database.controllers import message_controller


class MessageState(StatesGroup):
    waiting_for_approve = State()


class UserMenu:
    def __init__(self, bot: Bot):
        self.bot = bot

    # Here is decorator to check users available minutes
    # def balance_decorator(self, func):
    #     def wrapper(*args, **kwargs):
    #         if not self.check_user_balance():
    #             await self.bot.send_message(chat_id=, text="–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å")
    #         func(*args, **kwargs)
    #     return wrapper

    @staticmethod
    async def user_choice(call: types.CallbackQuery):
        await call.message.answer(text='–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ youtube –≤–∏–¥–µ–æ –∏ —è –≤–∞–º —Ä–∞—Å—Å–∫–∞–∂—É –æ —á–µ–º –æ–Ω–æüßê')

    @staticmethod
    async def user_choice_command(message: types.Message):
        await message.answer(text='–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ youtube –≤–∏–¥–µ–æ –∏ —è –≤–∞–º —Ä–∞—Å—Å–∫–∞–∂—É –æ —á–µ–º –æ–Ω–æüßê')

    @staticmethod
    async def get_youtube_link(message: types.Message, state: FSMContext):
        if not validate.validate_data(message.text):
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å youtube, –∞ –Ω–µ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...')
            return
        await state.update_data(youtube_link=message.text)
        keyboard = markups.get_approve_menu()
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ", reply_markup=keyboard)

    async def check_user_balance(self, call: types.CallbackQuery, state: FSMContext):
        """Checks user's available minutes amount"""
        available_minutes = message_controller.db_read_minute_balance(call.from_user.id)

        if available_minutes < demand_minutes:
            keyboard = markups.get_refill_balance_menu()
            await call.message.answer(f"–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∏–Ω—É—Ç.\n"
                                      f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_minutes}\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {demand_minutes}",
                                      reply_markup=keyboard)
            return
        keyboard = markups.get_spent_minutes_menu()
        await call.message.answer(f"–•–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å {demand_minutes} –º–∏–Ω—É—Ç —Å –±–∞–ª–∞–Ω—Å–∞?\n"
                                  f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_minutes}", reply_markup=keyboard)

    @staticmethod
    async def approve_choose_video(call: types.CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        youtube_link = user_data.get("youtube_link")
        await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...')
        try:
            summary_text = get_ai_summary(youtube_link)
            keyboard = markups.get_continue_menu()
            await call.message.answer(f'–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ: \n\n{summary_text}', reply_markup=keyboard)
        except Exception as ex:
            await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä). '
                                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ...')

    def register_handlers(self, dp: Dispatcher):
        """Register message handlers"""
        dp.register_callback_query_handler(self.user_choice, text="start_app")
        dp.register_message_handler(self.user_choice_command, commands="messages")
        dp.register_message_handler(self.get_youtube_link, content_types=["text"], state='*')
        dp.register_callback_query_handler(self.check_user_balance, text="check_balance", state='*')
        dp.register_callback_query_handler(self., text="refill_balance", state='*')
        dp.register_callback_query_handler(self.approve_choose_video, text="spent_minutes", state='*')
